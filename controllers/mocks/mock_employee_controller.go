// Code generated by MockGen. DO NOT EDIT.
// Source: controllers\employee_controller.go
//
// Generated by this command:
//
//	mockgen -source=controllers\employee_controller.go -destination=controllers\mocks\mock_employee_controller.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockEmployeeController is a mock of EmployeeController interface.
type MockEmployeeController struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeControllerMockRecorder
	isgomock struct{}
}

// MockEmployeeControllerMockRecorder is the mock recorder for MockEmployeeController.
type MockEmployeeControllerMockRecorder struct {
	mock *MockEmployeeController
}

// NewMockEmployeeController creates a new mock instance.
func NewMockEmployeeController(ctrl *gomock.Controller) *MockEmployeeController {
	mock := &MockEmployeeController{ctrl: ctrl}
	mock.recorder = &MockEmployeeControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeController) EXPECT() *MockEmployeeControllerMockRecorder {
	return m.recorder
}

// CreateEmployee mocks base method.
func (m *MockEmployeeController) CreateEmployee(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateEmployee", c)
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockEmployeeControllerMockRecorder) CreateEmployee(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockEmployeeController)(nil).CreateEmployee), c)
}

// DeleteEmployee mocks base method.
func (m *MockEmployeeController) DeleteEmployee(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteEmployee", c)
}

// DeleteEmployee indicates an expected call of DeleteEmployee.
func (mr *MockEmployeeControllerMockRecorder) DeleteEmployee(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockEmployeeController)(nil).DeleteEmployee), c)
}

// GetEmployee mocks base method.
func (m *MockEmployeeController) GetEmployee(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetEmployee", c)
}

// GetEmployee indicates an expected call of GetEmployee.
func (mr *MockEmployeeControllerMockRecorder) GetEmployee(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployee", reflect.TypeOf((*MockEmployeeController)(nil).GetEmployee), c)
}

// GetEmployees mocks base method.
func (m *MockEmployeeController) GetEmployees(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetEmployees", c)
}

// GetEmployees indicates an expected call of GetEmployees.
func (mr *MockEmployeeControllerMockRecorder) GetEmployees(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployees", reflect.TypeOf((*MockEmployeeController)(nil).GetEmployees), c)
}

// RegisterRoutes mocks base method.
func (m *MockEmployeeController) RegisterRoutes(router *gin.RouterGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterRoutes", router)
}

// RegisterRoutes indicates an expected call of RegisterRoutes.
func (mr *MockEmployeeControllerMockRecorder) RegisterRoutes(router any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRoutes", reflect.TypeOf((*MockEmployeeController)(nil).RegisterRoutes), router)
}

// UpdateEmployee mocks base method.
func (m *MockEmployeeController) UpdateEmployee(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateEmployee", c)
}

// UpdateEmployee indicates an expected call of UpdateEmployee.
func (mr *MockEmployeeControllerMockRecorder) UpdateEmployee(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockEmployeeController)(nil).UpdateEmployee), c)
}
